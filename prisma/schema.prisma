// Prisma가 이 TypeScript 코드에 대한 javascript 코드를 어디에 어떻게 생성할지 정의하는 블록
generator client {
  // provider는 Prisma가 어떤 종류의 코드를 생성할지 지정하는 필드임
  // typescript/javascript 용 Prisma Client를 생성하는 것이기 때문에 이 값은 바꾸면 안됨(고정값임)
  provider = "prisma-client-js"
  // Prisma Client를 내가 정의한 경로에 생성하겠다는 의미
  // 보통 Prisma Client는 node_modules/.prisma/client/index.js 위치에 생성됨.
  // 그래서 일반적인 경로에 생성되게 하는게 더 나음
  // output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  id          Int    @id @default(autoincrement())
  name        String @db.VarChar(100)
  nickname    String @unique @db.VarChar(100)
  email       String @unique @db.VarChar(100)
  skipped_cnt Int    @default(0)

  // 한 명의 유저는 여러 그룹의 그룹장이 될 수 있음
  // Users와 Groups는 일대다 관계
  managingGroups Groups[]

  // 한 명의 유저는 여러 그룹에 속할 수 있음
  // Users와 GroupMembership은 일대다 관계
  groups GroupMembership[]

  @@map("users")
}

model GroupMembership {
  id Int @id @default(autoincrement())

  user   Users @relation(fields: [userId], references: [id])
  userId Int

  group   Groups @relation(fields: [groupId], references: [id])
  groupId Int

  // 참여일
  joinedAt DateTime @default(now())

  @@unique([userId, groupId])
  @@map("group_membership")
}

model Groups {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(100)

  // 모든 그룹에는 한 명의 그룹장만 존재
  manager   Users @relation(fields: [managerId], references: [id])
  managerId Int

  users GroupMembership[]

  @@map("groups")
}
