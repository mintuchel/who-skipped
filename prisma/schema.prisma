// Prisma가 이 TypeScript 코드에 대한 javascript 코드를 어디에 어떻게 생성할지 정의하는 블록
generator client {
  // provider는 Prisma가 어떤 종류의 코드를 생성할지 지정하는 필드임
  // typescript/javascript 용 Prisma Client를 생성하는 것이기 때문에 이 값은 바꾸면 안됨(고정값임)
  provider = "prisma-client-js"
  // Prisma Client를 내가 정의한 경로에 생성하겠다는 의미
  // 보통 Prisma Client는 node_modules/.prisma/client/index.js 위치에 생성됨.
  // 그래서 일반적인 경로에 생성되게 하는게 더 나음
  // output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum SubmissionResult {
  ACCEPTED         // 맞았습니다
  WRONG_ANSWER      // 틀렸습니다
  TIME_LIMIT_EXCEED // 시간 초과
  RUNTIME_ERROR     // 런타임 에러
  COMPILE_ERROR     // 컴파일 에러
  MEMORY_LIMIT_EXCEED // 메모리 초과
}

enum Role{
  ADMIN
  USER
}

enum Tag{
  MAZE_RUNNER // 메이즈러너 - BFS DFS 문제 해결
  HANZEL_AND_GRETEL // 헨젤과그레텔 - 백트래킹 문제 해결
  ARCHIMEDES // 아르키메데스 - 수학 해결
  OPTIMIZER // 최적화의 달인 - DP 해결
  HEAD_FIRST// 맨땅에 헤딩 - 브루트포스 해결
  ZERO_TO_HERO // 무에서유 - 구현 해결
  BOY_SCOUT // 그래프 문제 해결 -> 탐색 해결?
  PRO_FINESSE  // 해결사 - 문제 30개 해결
  HARD_WORKER // 하드워커 - 10일 연속 문제풀이 시도
  TIME_KEEPER // 시간의 지배자 - 시간초과 10개 이상
  MISSING // 행방불명자 - 한 달 동안 연속 문제풀이 시도 X
}

// 문제풀이 제출 기록
model Submissions {
  // 20억개를 넘을 일은 없음!
  id Int @id @default(autoincrement())

  // 백준에서 지정된 값 40억을 넘을 수 있음
  // 특정 날짜 이전것을 삭제할때 이거 사용하면 됨
  solutionId Int @db.UnsignedInt
  
  user Users @relation(fields: [name], references: [name])
  name String

  problemId Int

  result SubmissionResult @default(WRONG_ANSWER)

  // memory는 UnsignedSmallInt(65,000)은 넘음
  memory Int @db.UnsignedMediumInt
  // time은 UnsignedSmallInt(65,000)를 넘지는 않음
  time Int @db.UnsignedSmallInt
  language String
  codeLength Int

  submittedAt DateTime @db.Date

  @@map("submissions")
}

model Users {
  id          String @id @default(uuid())
  name    String @unique @db.VarChar(20)
  password    String @db.VarChar(255)
  skippedCnt Int    @default(0)
  role        Role   @default(USER)
  
  // 한 명의 유저는 여러 그룹의 그룹장이 될 수 있음
  // Users와 Groups는 일대다 관계
  managingGroups Groups[]

  // 한 명의 유저는 여러 그룹에 속할 수 있음
  // Users와 GroupMembership은 일대다 관계
  groups GroupMembership[]

  // 한 명의 유저는 여러 커밋 내역이 존재
  submissions Submissions[]

  @@map("users")
}

model GroupMembership {
  id Int @id @default(autoincrement())

  user   Users @relation(fields: [userId], references: [id])
  userId String

  group   Groups @relation(fields: [groupId], references: [id])
  groupId Int

  // 참여일
  joinedAt DateTime @default(now())

  @@unique([userId, groupId])
  @@map("group_membership")
}

// SELECT * FROM `groups`;
model Groups {
  id   Int       @id @default(autoincrement())
  name String    @unique @db.VarChar(100) // 그룹 이름

  // 모든 그룹에는 한 명의 그룹장만 존재
  manager   Users @relation(fields: [managerId], references: [id])
  managerId String 

  managerName String @db.VarChar(100) // 매니저 이름
  
  users GroupMembership[]

  createdAt DateTime @default(now())
  
  @@map("groups")
}
